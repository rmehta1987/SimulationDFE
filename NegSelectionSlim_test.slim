// script for Stabalizing Selection using underdominance


initialize() {
	setSeed(100);
	defineConstant("outfile", "test"); // output filename
	
	defineConstant("L", 36e6);      // total chromosome length
	defineConstant("mu", 7.1111*(10^-10)); // mutation rate
	defineConstant("dominance_coef", 0.5); // dominance coefficient so that heterozygote is selected against
	// defineConstant("stable_selection", -1*((1/(4*N))*1e-2));  // selection coefficient for under-dominance
	defineConstant("recomb_rate", 1e-8);  // recombination rate
	initializeRecombinationRate(1e-8);
	initializeMutationRate(mu);
	
	initializeMutationType("m2", dominance_coef,  "g", -0.00657402090856, 0.186);  // single selection coefficient
	initializeGenomicElementType("g1", c(m2), c(1.0));
	 // uniform chromosome of length 1 Mb with uniform recombination
    initializeGenomicElement(g1, 0, L);
    
}

/// **Demography:**

// Create the ancestral population
1 early() {
	sim.addSubpop("p1", 14448);
}
500 early() {
	p1.setSubpopulationSize(14068);
}
600 early() {
	p1.setSubpopulationSize(20000);
}



600 late() {
	
	p1.outputVCFSample(10,filePath="/home/rahul/PopGen/SimulationSFS/slim_lof_test.vcf");
	m2muts = sim.mutationsOfType(m2);
	freqs = sim.mutationFrequencies(p1, m2muts);
	
	lines = m2muts.id + "\t" + m2muts.position + "\t" + m2muts.selectionCoeff + "\t" + freqs + "\n";
	file = paste(lines, sep="");
	file = "tag" + "\t" + "position" + "\t" + "selection coefficient" + "\t" + "freq\n" + file;
	if (!writeFile(paste(c(outfile,".mixture"),sep=""), file)) stop("Error writing file.");
	sim.simulationFinished();
}

function (integer)mutTypeFrequency(object<Subpopulation>$ subtype, o<MutationType>$ mutType)
{
	muts = sim.mutationsOfType(mutType);
	if (muts.size() > 0)
	{
		freqs = sim.mutationFrequencies(subtype, muts);
		indices = freqs > 0.001;
		return sum(indices);
		}
	return NULL;
}

function (integer)mutTypeFrequency2(object<Subpopulation>$ subtype, o<MutationType>$ mutType)
{
	muts = sim.mutationsOfType(mutType);
	if (muts.size() > 0)
	{
		freqs = sim.mutationFrequencies(subtype, muts);
		indices = freqs <= 0.001;
		return sum(indices);
		}
	return NULL;
}
